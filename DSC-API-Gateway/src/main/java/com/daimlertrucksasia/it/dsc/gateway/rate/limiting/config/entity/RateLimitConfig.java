package com.daimlertrucksasia.it.dsc.gateway.rate.limiting.config.entity;

import com.daimlertrucksasia.it.dsc.gateway.validation.rulebook.RateLimitConfigEntityListener;
import com.daimlertrucksasia.it.dsc.gateway.validation.rulebook.UniqueConstraintValidatorListener;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.UUID;

/**
 * JPA entity representing a rate limiting configuration for a specific client and API route.
 *
 * <p>This configuration defines allowed requests per time window, burst limits, and other attributes
 * such as priority and status. It is stored in a relational PostgreSQL database.</p>
 *
 * <p>A unique constraint is enforced on the combination of {@code clientId} and {@code route} to
 * prevent duplicate configurations.</p>
 *
 * <p>Additional metadata can be stored in the {@code customAttributes} map, which is persisted
 * as a separate key-value table.</p>
 */
@Data
@Builder
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EntityListeners({RateLimitConfigEntityListener.class,
        UniqueConstraintValidatorListener.class})
@Entity
@Table(
        name = "rate_limit_config",
        uniqueConstraints = {
                @UniqueConstraint(name = "client_route_idx", columnNames = {"client_id", "route"})
        }
)
public class RateLimitConfig {


    /**
     * Primary key, auto-generated by the database (PostgreSQL sequence).
     */
    @Id
    @GeneratedValue(generator = "uuid2")
    @GenericGenerator(name = "uuid2", strategy = "uuid2")
    @Column(columnDefinition = "uuid", updatable = false, nullable = false)
    private UUID id;

    /**
     * Unique client identifier for whom the rate limiting configuration applies.
     */
    @Column(name = "client_id", nullable = false, unique = true)
    private String clientId;

    /**
     * API route or path this rate limit configuration is bound to.
     */
    @Column(nullable = false, unique = true)
    private String route;

    /**
     * Base rate limit: maximum number of requests allowed per minute.
     *
     * @deprecated This field is no longer used. Use 'maxTokensPerWindow' instead.
     */
    @Deprecated
    @Column(name = "requests_per_minute")
    private long requestsPerMinute;

    /**
     * Base rate limit: maximum number of requests allowed per minute.
     */
    @Column(name = "maxTokensPerWindow")
    private long maxTokensPerWindow;

    /**
     * Time window for rate limiting (e.g., 60, 300).
     */
    @Column(name = "time_window")
    private long timeWindow;

    /**
     * Time unit for the time window (e.g., SECONDS, MINUTES, HOURS).
     */
    @Column(name = "time_unit")
    private String timeUnit;

    /**
     * Additional requests allowed beyond base rate within a short burst.
     */
    @Column(name = "burst_capacity")
    private long burstCapacity;

    /**
     * Optional priority for configuration, used in sorting or conflict resolution.
     */
    @Column(name = "priority")
    private int priority;

    /**
     * Optional expiration date â€” used to deactivate configurations after a given time.
     */
    @Column(name = "expiration_date")
    private LocalDateTime expirationDate;

    /**
     * Status of this configuration, e.g., ACTIVE, INACTIVE, or PENDING.
     */
    @Column(name = "status")
    private String status;

    /**
     * Timestamp when this configuration was first created.
     * Automatically managed by Hibernate using @CreationTimestamp.
     */
    @CreationTimestamp
    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    /**
     * Timestamp when this configuration was last modified.
     * Automatically managed by Hibernate using @UpdateTimestamp.
     */
    @UpdateTimestamp
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    /**
     * Flexible key-value map for additional configuration attributes.
     * Stored in a separate join table named 'rate_limit_custom_attributes'.
     */
    @ElementCollection
    @CollectionTable(
            name = "rate_limit_custom_attributes",
            joinColumns = @JoinColumn(name = "rate_limit_config_id")
    )
    @MapKeyColumn(name = "attribute_key")
    @Column(name = "attribute_value")
    private Map<String, String> customAttributes;

}
