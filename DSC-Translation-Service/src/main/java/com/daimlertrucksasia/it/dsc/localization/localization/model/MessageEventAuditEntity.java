package com.daimlertrucksasia.it.dsc.localization.localization.model;

import jakarta.persistence.*;
import lombok.*;

import java.time.Instant;
import java.util.Arrays;

/**
 * Entity class representing audit entries for message localization events in a distributed system.
 *
 * <p>
 * This model captures the lifecycle of a localization request, including:
 * <ul>
 *     <li>Originating service and target service identifiers</li>
 *     <li>Request correlation information for multi-tenant or multi-user environments</li>
 *     <li>Message template metadata, locale, and parameters</li>
 *     <li>Final resolved localized message content</li>
 *     <li>Timestamps for traceability and audit logging</li>
 * </ul>
 * </p>
 *
 * <p>
 * This data is persisted in a relational PostgreSQL database table called {@code message_event_audit}.
 * A unique constraint is enforced across {@code requestId}, {@code userCoRelationID}, and
 * {@code serviceCoRelationID} to ensure one-to-one mapping for audit purposes.
 * </p>
 *
 * <h3>Use Cases:</h3>
 * <ul>
 *     <li>Auditing localization workflows</li>
 *     <li>Debugging message rendering issues per locale</li>
 *     <li>Tracing message lifecycles across microservices</li>
 *     <li>Analytics on latency or usage patterns</li>
 * </ul>
 *
 * @since 1.0
 */
@Entity
@Table(name = "message_event_audit",
        uniqueConstraints = @UniqueConstraint(name = "uk_msg_event_audit",
                columnNames = {"request_id", "user_correlation_id", "service_correlation_id"}))
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class MessageEventAuditEntity {

    /**
     * Primary key for the audit record. Auto-generated by PostgreSQL.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Unique identifier for the request event.
     * Used to correlate logs and trace request lifecycles.
     */
    @Column(name = "request_id", nullable = false, unique = true)
    private String requestId;

    /**
     * User-specific correlation ID used in multi-tenant or user-context scenarios.
     */
    @Column(name = "user_correlation_id")
    private String userCoRelationID;

    /**
     * Service-specific correlation ID used to identify the producer/consumer microservice.
     */
    @Column(name = "service_correlation_id")
    private String serviceCoRelationID;

    /**
     * The identifier of the message template used for localization.
     */
    @Column(name = "message_template_id")
    private String msgTemplateID;

    /**
     * Originating microservice that triggered the localization event.
     */
    @Column(name = "source_service")
    private String sourceService;

    /**
     * Target service intended to receive the localized message.
     */
    @Column(name = "target_service")
    private String targetService;

    /**
     * ISO locale code requested for localization (e.g., "en-US", "ja").
     */
    @Column(name = "locale")
    private String locale;

    /**
     * Parameters to be dynamically substituted into the message template.
     * Stored as a serialized string (e.g., comma-separated values).
     */
    @Column(name = "args")
    private String args;

    /**
     * Raw message template or unlocalized content.
     */
    @Column(name = "content", columnDefinition = "TEXT")
    private String content;

    /**
     * Final localized message after template resolution and argument substitution.
     */
    @Column(name = "resolved_message", columnDefinition = "TEXT")
    private String resolvedMessage;

    /**
     * Timestamp (UTC) when the message event was initiated.
     */
    @Column(name = "msg_creation_timestamp")
    private Instant msgCreationTimestamp;

    /**
     * Timestamp (UTC) when the message was resolved.
     */
    @Column(name = "msg_resolution_timestamp")
    private Instant msgResolutionTimestamp;

    /**
     * Converts the stringified argument list to an actual array.
     */
    public String[] getArgsArray() {
        return args != null ? args.split(",") : new String[0];
    }

    /**
     * Sets the stringified version of an argument array.
     */
    public void setArgsArray(String[] argsArray) {
        this.args = String.join(",", argsArray);
    }

    @Override
    public String toString() {
        return "MessageEventAuditEntity{" +
                "id=" + id +
                ", requestId='" + requestId + '\'' +
                ", userCoRelationID='" + userCoRelationID + '\'' +
                ", serviceCoRelationID='" + serviceCoRelationID + '\'' +
                ", msgTemplateID='" + msgTemplateID + '\'' +
                ", sourceService='" + sourceService + '\'' +
                ", targetService='" + targetService + '\'' +
                ", locale='" + locale + '\'' +
                ", args=" + Arrays.toString(getArgsArray()) +
                ", content='" + content + '\'' +
                ", resolvedMessage='" + resolvedMessage + '\'' +
                ", msgCreationTimestamp=" + msgCreationTimestamp +
                ", msgResolutionTimestamp=" + msgResolutionTimestamp +
                '}';
    }
}
